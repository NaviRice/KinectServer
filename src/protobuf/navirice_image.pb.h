// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: navirice_image.proto

#ifndef PROTOBUF_navirice_5fimage_2eproto__INCLUDED
#define PROTOBUF_navirice_5fimage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace navirice {
class ImageSet;
class ImageSetDefaultTypeInternal;
extern ImageSetDefaultTypeInternal _ImageSet_default_instance_;
class ImageSet_Image;
class ImageSet_ImageDefaultTypeInternal;
extern ImageSet_ImageDefaultTypeInternal _ImageSet_Image_default_instance_;
}  // namespace navirice

namespace navirice {

namespace protobuf_navirice_5fimage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_navirice_5fimage_2eproto

enum ImageSet_Image_DataType {
  ImageSet_Image_DataType_FLOAT = 0,
  ImageSet_Image_DataType_UBYTE = 1,
  ImageSet_Image_DataType_ImageSet_Image_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ImageSet_Image_DataType_ImageSet_Image_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ImageSet_Image_DataType_IsValid(int value);
const ImageSet_Image_DataType ImageSet_Image_DataType_DataType_MIN = ImageSet_Image_DataType_FLOAT;
const ImageSet_Image_DataType ImageSet_Image_DataType_DataType_MAX = ImageSet_Image_DataType_UBYTE;
const int ImageSet_Image_DataType_DataType_ARRAYSIZE = ImageSet_Image_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageSet_Image_DataType_descriptor();
inline const ::std::string& ImageSet_Image_DataType_Name(ImageSet_Image_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageSet_Image_DataType_descriptor(), value);
}
inline bool ImageSet_Image_DataType_Parse(
    const ::std::string& name, ImageSet_Image_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageSet_Image_DataType>(
    ImageSet_Image_DataType_descriptor(), name, value);
}
// ===================================================================

class ImageSet_Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:navirice.ImageSet.Image) */ {
 public:
  ImageSet_Image();
  virtual ~ImageSet_Image();

  ImageSet_Image(const ImageSet_Image& from);

  inline ImageSet_Image& operator=(const ImageSet_Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageSet_Image(ImageSet_Image&& from) noexcept
    : ImageSet_Image() {
    *this = ::std::move(from);
  }

  inline ImageSet_Image& operator=(ImageSet_Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageSet_Image& default_instance();

  static inline const ImageSet_Image* internal_default_instance() {
    return reinterpret_cast<const ImageSet_Image*>(
               &_ImageSet_Image_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ImageSet_Image* other);
  friend void swap(ImageSet_Image& a, ImageSet_Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageSet_Image* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageSet_Image* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageSet_Image& from);
  void MergeFrom(const ImageSet_Image& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageSet_Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ImageSet_Image_DataType DataType;
  static const DataType FLOAT =
    ImageSet_Image_DataType_FLOAT;
  static const DataType UBYTE =
    ImageSet_Image_DataType_UBYTE;
  static inline bool DataType_IsValid(int value) {
    return ImageSet_Image_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    ImageSet_Image_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    ImageSet_Image_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    ImageSet_Image_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return ImageSet_Image_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return ImageSet_Image_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return ImageSet_Image_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 channels = 3;
  void clear_channels();
  static const int kChannelsFieldNumber = 3;
  ::google::protobuf::uint32 channels() const;
  void set_channels(::google::protobuf::uint32 value);

  // .navirice.ImageSet.Image.DataType data_type = 4;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 4;
  ::navirice::ImageSet_Image_DataType data_type() const;
  void set_data_type(::navirice::ImageSet_Image_DataType value);

  // uint32 data_size = 5;
  void clear_data_size();
  static const int kDataSizeFieldNumber = 5;
  ::google::protobuf::uint32 data_size() const;
  void set_data_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:navirice.ImageSet.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 channels_;
  int data_type_;
  ::google::protobuf::uint32 data_size_;
  mutable int _cached_size_;
  friend struct protobuf_navirice_5fimage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:navirice.ImageSet) */ {
 public:
  ImageSet();
  virtual ~ImageSet();

  ImageSet(const ImageSet& from);

  inline ImageSet& operator=(const ImageSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageSet(ImageSet&& from) noexcept
    : ImageSet() {
    *this = ::std::move(from);
  }

  inline ImageSet& operator=(ImageSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageSet& default_instance();

  static inline const ImageSet* internal_default_instance() {
    return reinterpret_cast<const ImageSet*>(
               &_ImageSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ImageSet* other);
  friend void swap(ImageSet& a, ImageSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageSet* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageSet& from);
  void MergeFrom(const ImageSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ImageSet_Image Image;

  // accessors -------------------------------------------------------

  // .navirice.ImageSet.Image RGB = 2;
  bool has_rgb() const;
  void clear_rgb();
  static const int kRGBFieldNumber = 2;
  const ::navirice::ImageSet_Image& rgb() const;
  ::navirice::ImageSet_Image* mutable_rgb();
  ::navirice::ImageSet_Image* release_rgb();
  void set_allocated_rgb(::navirice::ImageSet_Image* rgb);

  // .navirice.ImageSet.Image Depth = 3;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 3;
  const ::navirice::ImageSet_Image& depth() const;
  ::navirice::ImageSet_Image* mutable_depth();
  ::navirice::ImageSet_Image* release_depth();
  void set_allocated_depth(::navirice::ImageSet_Image* depth);

  // .navirice.ImageSet.Image IR = 4;
  bool has_ir() const;
  void clear_ir();
  static const int kIRFieldNumber = 4;
  const ::navirice::ImageSet_Image& ir() const;
  ::navirice::ImageSet_Image* mutable_ir();
  ::navirice::ImageSet_Image* release_ir();
  void set_allocated_ir(::navirice::ImageSet_Image* ir);

  // uint64 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:navirice.ImageSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::navirice::ImageSet_Image* rgb_;
  ::navirice::ImageSet_Image* depth_;
  ::navirice::ImageSet_Image* ir_;
  ::google::protobuf::uint64 count_;
  mutable int _cached_size_;
  friend struct protobuf_navirice_5fimage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageSet_Image

// uint32 width = 1;
inline void ImageSet_Image::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 ImageSet_Image::width() const {
  // @@protoc_insertion_point(field_get:navirice.ImageSet.Image.width)
  return width_;
}
inline void ImageSet_Image::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:navirice.ImageSet.Image.width)
}

// uint32 height = 2;
inline void ImageSet_Image::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 ImageSet_Image::height() const {
  // @@protoc_insertion_point(field_get:navirice.ImageSet.Image.height)
  return height_;
}
inline void ImageSet_Image::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:navirice.ImageSet.Image.height)
}

// uint32 channels = 3;
inline void ImageSet_Image::clear_channels() {
  channels_ = 0u;
}
inline ::google::protobuf::uint32 ImageSet_Image::channels() const {
  // @@protoc_insertion_point(field_get:navirice.ImageSet.Image.channels)
  return channels_;
}
inline void ImageSet_Image::set_channels(::google::protobuf::uint32 value) {
  
  channels_ = value;
  // @@protoc_insertion_point(field_set:navirice.ImageSet.Image.channels)
}

// .navirice.ImageSet.Image.DataType data_type = 4;
inline void ImageSet_Image::clear_data_type() {
  data_type_ = 0;
}
inline ::navirice::ImageSet_Image_DataType ImageSet_Image::data_type() const {
  // @@protoc_insertion_point(field_get:navirice.ImageSet.Image.data_type)
  return static_cast< ::navirice::ImageSet_Image_DataType >(data_type_);
}
inline void ImageSet_Image::set_data_type(::navirice::ImageSet_Image_DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:navirice.ImageSet.Image.data_type)
}

// uint32 data_size = 5;
inline void ImageSet_Image::clear_data_size() {
  data_size_ = 0u;
}
inline ::google::protobuf::uint32 ImageSet_Image::data_size() const {
  // @@protoc_insertion_point(field_get:navirice.ImageSet.Image.data_size)
  return data_size_;
}
inline void ImageSet_Image::set_data_size(::google::protobuf::uint32 value) {
  
  data_size_ = value;
  // @@protoc_insertion_point(field_set:navirice.ImageSet.Image.data_size)
}

// bytes data = 6;
inline void ImageSet_Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageSet_Image::data() const {
  // @@protoc_insertion_point(field_get:navirice.ImageSet.Image.data)
  return data_.GetNoArena();
}
inline void ImageSet_Image::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:navirice.ImageSet.Image.data)
}
#if LANG_CXX11
inline void ImageSet_Image::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:navirice.ImageSet.Image.data)
}
#endif
inline void ImageSet_Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:navirice.ImageSet.Image.data)
}
inline void ImageSet_Image::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:navirice.ImageSet.Image.data)
}
inline ::std::string* ImageSet_Image::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:navirice.ImageSet.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageSet_Image::release_data() {
  // @@protoc_insertion_point(field_release:navirice.ImageSet.Image.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageSet_Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:navirice.ImageSet.Image.data)
}

// -------------------------------------------------------------------

// ImageSet

// uint64 count = 1;
inline void ImageSet::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ImageSet::count() const {
  // @@protoc_insertion_point(field_get:navirice.ImageSet.count)
  return count_;
}
inline void ImageSet::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:navirice.ImageSet.count)
}

// .navirice.ImageSet.Image RGB = 2;
inline bool ImageSet::has_rgb() const {
  return this != internal_default_instance() && rgb_ != NULL;
}
inline void ImageSet::clear_rgb() {
  if (GetArenaNoVirtual() == NULL && rgb_ != NULL) delete rgb_;
  rgb_ = NULL;
}
inline const ::navirice::ImageSet_Image& ImageSet::rgb() const {
  const ::navirice::ImageSet_Image* p = rgb_;
  // @@protoc_insertion_point(field_get:navirice.ImageSet.RGB)
  return p != NULL ? *p : *reinterpret_cast<const ::navirice::ImageSet_Image*>(
      &::navirice::_ImageSet_Image_default_instance_);
}
inline ::navirice::ImageSet_Image* ImageSet::mutable_rgb() {
  
  if (rgb_ == NULL) {
    rgb_ = new ::navirice::ImageSet_Image;
  }
  // @@protoc_insertion_point(field_mutable:navirice.ImageSet.RGB)
  return rgb_;
}
inline ::navirice::ImageSet_Image* ImageSet::release_rgb() {
  // @@protoc_insertion_point(field_release:navirice.ImageSet.RGB)
  
  ::navirice::ImageSet_Image* temp = rgb_;
  rgb_ = NULL;
  return temp;
}
inline void ImageSet::set_allocated_rgb(::navirice::ImageSet_Image* rgb) {
  delete rgb_;
  rgb_ = rgb;
  if (rgb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:navirice.ImageSet.RGB)
}

// .navirice.ImageSet.Image Depth = 3;
inline bool ImageSet::has_depth() const {
  return this != internal_default_instance() && depth_ != NULL;
}
inline void ImageSet::clear_depth() {
  if (GetArenaNoVirtual() == NULL && depth_ != NULL) delete depth_;
  depth_ = NULL;
}
inline const ::navirice::ImageSet_Image& ImageSet::depth() const {
  const ::navirice::ImageSet_Image* p = depth_;
  // @@protoc_insertion_point(field_get:navirice.ImageSet.Depth)
  return p != NULL ? *p : *reinterpret_cast<const ::navirice::ImageSet_Image*>(
      &::navirice::_ImageSet_Image_default_instance_);
}
inline ::navirice::ImageSet_Image* ImageSet::mutable_depth() {
  
  if (depth_ == NULL) {
    depth_ = new ::navirice::ImageSet_Image;
  }
  // @@protoc_insertion_point(field_mutable:navirice.ImageSet.Depth)
  return depth_;
}
inline ::navirice::ImageSet_Image* ImageSet::release_depth() {
  // @@protoc_insertion_point(field_release:navirice.ImageSet.Depth)
  
  ::navirice::ImageSet_Image* temp = depth_;
  depth_ = NULL;
  return temp;
}
inline void ImageSet::set_allocated_depth(::navirice::ImageSet_Image* depth) {
  delete depth_;
  depth_ = depth;
  if (depth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:navirice.ImageSet.Depth)
}

// .navirice.ImageSet.Image IR = 4;
inline bool ImageSet::has_ir() const {
  return this != internal_default_instance() && ir_ != NULL;
}
inline void ImageSet::clear_ir() {
  if (GetArenaNoVirtual() == NULL && ir_ != NULL) delete ir_;
  ir_ = NULL;
}
inline const ::navirice::ImageSet_Image& ImageSet::ir() const {
  const ::navirice::ImageSet_Image* p = ir_;
  // @@protoc_insertion_point(field_get:navirice.ImageSet.IR)
  return p != NULL ? *p : *reinterpret_cast<const ::navirice::ImageSet_Image*>(
      &::navirice::_ImageSet_Image_default_instance_);
}
inline ::navirice::ImageSet_Image* ImageSet::mutable_ir() {
  
  if (ir_ == NULL) {
    ir_ = new ::navirice::ImageSet_Image;
  }
  // @@protoc_insertion_point(field_mutable:navirice.ImageSet.IR)
  return ir_;
}
inline ::navirice::ImageSet_Image* ImageSet::release_ir() {
  // @@protoc_insertion_point(field_release:navirice.ImageSet.IR)
  
  ::navirice::ImageSet_Image* temp = ir_;
  ir_ = NULL;
  return temp;
}
inline void ImageSet::set_allocated_ir(::navirice::ImageSet_Image* ir) {
  delete ir_;
  ir_ = ir;
  if (ir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:navirice.ImageSet.IR)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace navirice

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::navirice::ImageSet_Image_DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::navirice::ImageSet_Image_DataType>() {
  return ::navirice::ImageSet_Image_DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_navirice_5fimage_2eproto__INCLUDED
