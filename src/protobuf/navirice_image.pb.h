// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: navirice_image.proto

#ifndef PROTOBUF_navirice_5fimage_2eproto__INCLUDED
#define PROTOBUF_navirice_5fimage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_navirice_5fimage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsProtoImageImpl();
void InitDefaultsProtoImage();
void InitDefaultsProtoImageSetImpl();
void InitDefaultsProtoImageSet();
inline void InitDefaults() {
  InitDefaultsProtoImage();
  InitDefaultsProtoImageSet();
}
}  // namespace protobuf_navirice_5fimage_2eproto
namespace navirice {
class ProtoImage;
class ProtoImageDefaultTypeInternal;
extern ProtoImageDefaultTypeInternal _ProtoImage_default_instance_;
class ProtoImageSet;
class ProtoImageSetDefaultTypeInternal;
extern ProtoImageSetDefaultTypeInternal _ProtoImageSet_default_instance_;
}  // namespace navirice
namespace navirice {

enum ProtoImage_DataType {
  ProtoImage_DataType_FLOAT = 0,
  ProtoImage_DataType_UBYTE = 1,
  ProtoImage_DataType_ProtoImage_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProtoImage_DataType_ProtoImage_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProtoImage_DataType_IsValid(int value);
const ProtoImage_DataType ProtoImage_DataType_DataType_MIN = ProtoImage_DataType_FLOAT;
const ProtoImage_DataType ProtoImage_DataType_DataType_MAX = ProtoImage_DataType_UBYTE;
const int ProtoImage_DataType_DataType_ARRAYSIZE = ProtoImage_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoImage_DataType_descriptor();
inline const ::std::string& ProtoImage_DataType_Name(ProtoImage_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoImage_DataType_descriptor(), value);
}
inline bool ProtoImage_DataType_Parse(
    const ::std::string& name, ProtoImage_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoImage_DataType>(
    ProtoImage_DataType_descriptor(), name, value);
}
// ===================================================================

class ProtoImage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:navirice.ProtoImage) */ {
 public:
  ProtoImage();
  virtual ~ProtoImage();

  ProtoImage(const ProtoImage& from);

  inline ProtoImage& operator=(const ProtoImage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoImage(ProtoImage&& from) noexcept
    : ProtoImage() {
    *this = ::std::move(from);
  }

  inline ProtoImage& operator=(ProtoImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoImage* internal_default_instance() {
    return reinterpret_cast<const ProtoImage*>(
               &_ProtoImage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ProtoImage* other);
  friend void swap(ProtoImage& a, ProtoImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoImage* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtoImage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtoImage& from);
  void MergeFrom(const ProtoImage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtoImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ProtoImage_DataType DataType;
  static const DataType FLOAT =
    ProtoImage_DataType_FLOAT;
  static const DataType UBYTE =
    ProtoImage_DataType_UBYTE;
  static inline bool DataType_IsValid(int value) {
    return ProtoImage_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    ProtoImage_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    ProtoImage_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    ProtoImage_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return ProtoImage_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return ProtoImage_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return ProtoImage_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 channels = 3;
  void clear_channels();
  static const int kChannelsFieldNumber = 3;
  ::google::protobuf::uint32 channels() const;
  void set_channels(::google::protobuf::uint32 value);

  // .navirice.ProtoImage.DataType data_type = 4;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 4;
  ::navirice::ProtoImage_DataType data_type() const;
  void set_data_type(::navirice::ProtoImage_DataType value);

  // uint32 data_size = 5;
  void clear_data_size();
  static const int kDataSizeFieldNumber = 5;
  ::google::protobuf::uint32 data_size() const;
  void set_data_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:navirice.ProtoImage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 channels_;
  int data_type_;
  ::google::protobuf::uint32 data_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_navirice_5fimage_2eproto::TableStruct;
  friend void ::protobuf_navirice_5fimage_2eproto::InitDefaultsProtoImageImpl();
};
// -------------------------------------------------------------------

class ProtoImageSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:navirice.ProtoImageSet) */ {
 public:
  ProtoImageSet();
  virtual ~ProtoImageSet();

  ProtoImageSet(const ProtoImageSet& from);

  inline ProtoImageSet& operator=(const ProtoImageSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoImageSet(ProtoImageSet&& from) noexcept
    : ProtoImageSet() {
    *this = ::std::move(from);
  }

  inline ProtoImageSet& operator=(ProtoImageSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoImageSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoImageSet* internal_default_instance() {
    return reinterpret_cast<const ProtoImageSet*>(
               &_ProtoImageSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ProtoImageSet* other);
  friend void swap(ProtoImageSet& a, ProtoImageSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoImageSet* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtoImageSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtoImageSet& from);
  void MergeFrom(const ProtoImageSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtoImageSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .navirice.ProtoImage RGB = 2;
  bool has_rgb() const;
  void clear_rgb();
  static const int kRGBFieldNumber = 2;
  const ::navirice::ProtoImage& rgb() const;
  ::navirice::ProtoImage* release_rgb();
  ::navirice::ProtoImage* mutable_rgb();
  void set_allocated_rgb(::navirice::ProtoImage* rgb);

  // .navirice.ProtoImage Depth = 3;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 3;
  const ::navirice::ProtoImage& depth() const;
  ::navirice::ProtoImage* release_depth();
  ::navirice::ProtoImage* mutable_depth();
  void set_allocated_depth(::navirice::ProtoImage* depth);

  // .navirice.ProtoImage IR = 4;
  bool has_ir() const;
  void clear_ir();
  static const int kIRFieldNumber = 4;
  const ::navirice::ProtoImage& ir() const;
  ::navirice::ProtoImage* release_ir();
  ::navirice::ProtoImage* mutable_ir();
  void set_allocated_ir(::navirice::ProtoImage* ir);

  // uint64 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:navirice.ProtoImageSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::navirice::ProtoImage* rgb_;
  ::navirice::ProtoImage* depth_;
  ::navirice::ProtoImage* ir_;
  ::google::protobuf::uint64 count_;
  mutable int _cached_size_;
  friend struct ::protobuf_navirice_5fimage_2eproto::TableStruct;
  friend void ::protobuf_navirice_5fimage_2eproto::InitDefaultsProtoImageSetImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoImage

// uint32 width = 1;
inline void ProtoImage::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 ProtoImage::width() const {
  // @@protoc_insertion_point(field_get:navirice.ProtoImage.width)
  return width_;
}
inline void ProtoImage::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:navirice.ProtoImage.width)
}

// uint32 height = 2;
inline void ProtoImage::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 ProtoImage::height() const {
  // @@protoc_insertion_point(field_get:navirice.ProtoImage.height)
  return height_;
}
inline void ProtoImage::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:navirice.ProtoImage.height)
}

// uint32 channels = 3;
inline void ProtoImage::clear_channels() {
  channels_ = 0u;
}
inline ::google::protobuf::uint32 ProtoImage::channels() const {
  // @@protoc_insertion_point(field_get:navirice.ProtoImage.channels)
  return channels_;
}
inline void ProtoImage::set_channels(::google::protobuf::uint32 value) {
  
  channels_ = value;
  // @@protoc_insertion_point(field_set:navirice.ProtoImage.channels)
}

// .navirice.ProtoImage.DataType data_type = 4;
inline void ProtoImage::clear_data_type() {
  data_type_ = 0;
}
inline ::navirice::ProtoImage_DataType ProtoImage::data_type() const {
  // @@protoc_insertion_point(field_get:navirice.ProtoImage.data_type)
  return static_cast< ::navirice::ProtoImage_DataType >(data_type_);
}
inline void ProtoImage::set_data_type(::navirice::ProtoImage_DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:navirice.ProtoImage.data_type)
}

// uint32 data_size = 5;
inline void ProtoImage::clear_data_size() {
  data_size_ = 0u;
}
inline ::google::protobuf::uint32 ProtoImage::data_size() const {
  // @@protoc_insertion_point(field_get:navirice.ProtoImage.data_size)
  return data_size_;
}
inline void ProtoImage::set_data_size(::google::protobuf::uint32 value) {
  
  data_size_ = value;
  // @@protoc_insertion_point(field_set:navirice.ProtoImage.data_size)
}

// bytes data = 6;
inline void ProtoImage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtoImage::data() const {
  // @@protoc_insertion_point(field_get:navirice.ProtoImage.data)
  return data_.GetNoArena();
}
inline void ProtoImage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:navirice.ProtoImage.data)
}
#if LANG_CXX11
inline void ProtoImage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:navirice.ProtoImage.data)
}
#endif
inline void ProtoImage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:navirice.ProtoImage.data)
}
inline void ProtoImage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:navirice.ProtoImage.data)
}
inline ::std::string* ProtoImage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:navirice.ProtoImage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtoImage::release_data() {
  // @@protoc_insertion_point(field_release:navirice.ProtoImage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoImage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:navirice.ProtoImage.data)
}

// -------------------------------------------------------------------

// ProtoImageSet

// uint64 count = 1;
inline void ProtoImageSet::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ProtoImageSet::count() const {
  // @@protoc_insertion_point(field_get:navirice.ProtoImageSet.count)
  return count_;
}
inline void ProtoImageSet::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:navirice.ProtoImageSet.count)
}

// .navirice.ProtoImage RGB = 2;
inline bool ProtoImageSet::has_rgb() const {
  return this != internal_default_instance() && rgb_ != NULL;
}
inline void ProtoImageSet::clear_rgb() {
  if (GetArenaNoVirtual() == NULL && rgb_ != NULL) {
    delete rgb_;
  }
  rgb_ = NULL;
}
inline const ::navirice::ProtoImage& ProtoImageSet::rgb() const {
  const ::navirice::ProtoImage* p = rgb_;
  // @@protoc_insertion_point(field_get:navirice.ProtoImageSet.RGB)
  return p != NULL ? *p : *reinterpret_cast<const ::navirice::ProtoImage*>(
      &::navirice::_ProtoImage_default_instance_);
}
inline ::navirice::ProtoImage* ProtoImageSet::release_rgb() {
  // @@protoc_insertion_point(field_release:navirice.ProtoImageSet.RGB)
  
  ::navirice::ProtoImage* temp = rgb_;
  rgb_ = NULL;
  return temp;
}
inline ::navirice::ProtoImage* ProtoImageSet::mutable_rgb() {
  
  if (rgb_ == NULL) {
    rgb_ = new ::navirice::ProtoImage;
  }
  // @@protoc_insertion_point(field_mutable:navirice.ProtoImageSet.RGB)
  return rgb_;
}
inline void ProtoImageSet::set_allocated_rgb(::navirice::ProtoImage* rgb) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rgb_;
  }
  if (rgb) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rgb = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rgb, submessage_arena);
    }
    
  } else {
    
  }
  rgb_ = rgb;
  // @@protoc_insertion_point(field_set_allocated:navirice.ProtoImageSet.RGB)
}

// .navirice.ProtoImage Depth = 3;
inline bool ProtoImageSet::has_depth() const {
  return this != internal_default_instance() && depth_ != NULL;
}
inline void ProtoImageSet::clear_depth() {
  if (GetArenaNoVirtual() == NULL && depth_ != NULL) {
    delete depth_;
  }
  depth_ = NULL;
}
inline const ::navirice::ProtoImage& ProtoImageSet::depth() const {
  const ::navirice::ProtoImage* p = depth_;
  // @@protoc_insertion_point(field_get:navirice.ProtoImageSet.Depth)
  return p != NULL ? *p : *reinterpret_cast<const ::navirice::ProtoImage*>(
      &::navirice::_ProtoImage_default_instance_);
}
inline ::navirice::ProtoImage* ProtoImageSet::release_depth() {
  // @@protoc_insertion_point(field_release:navirice.ProtoImageSet.Depth)
  
  ::navirice::ProtoImage* temp = depth_;
  depth_ = NULL;
  return temp;
}
inline ::navirice::ProtoImage* ProtoImageSet::mutable_depth() {
  
  if (depth_ == NULL) {
    depth_ = new ::navirice::ProtoImage;
  }
  // @@protoc_insertion_point(field_mutable:navirice.ProtoImageSet.Depth)
  return depth_;
}
inline void ProtoImageSet::set_allocated_depth(::navirice::ProtoImage* depth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete depth_;
  }
  if (depth) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      depth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, depth, submessage_arena);
    }
    
  } else {
    
  }
  depth_ = depth;
  // @@protoc_insertion_point(field_set_allocated:navirice.ProtoImageSet.Depth)
}

// .navirice.ProtoImage IR = 4;
inline bool ProtoImageSet::has_ir() const {
  return this != internal_default_instance() && ir_ != NULL;
}
inline void ProtoImageSet::clear_ir() {
  if (GetArenaNoVirtual() == NULL && ir_ != NULL) {
    delete ir_;
  }
  ir_ = NULL;
}
inline const ::navirice::ProtoImage& ProtoImageSet::ir() const {
  const ::navirice::ProtoImage* p = ir_;
  // @@protoc_insertion_point(field_get:navirice.ProtoImageSet.IR)
  return p != NULL ? *p : *reinterpret_cast<const ::navirice::ProtoImage*>(
      &::navirice::_ProtoImage_default_instance_);
}
inline ::navirice::ProtoImage* ProtoImageSet::release_ir() {
  // @@protoc_insertion_point(field_release:navirice.ProtoImageSet.IR)
  
  ::navirice::ProtoImage* temp = ir_;
  ir_ = NULL;
  return temp;
}
inline ::navirice::ProtoImage* ProtoImageSet::mutable_ir() {
  
  if (ir_ == NULL) {
    ir_ = new ::navirice::ProtoImage;
  }
  // @@protoc_insertion_point(field_mutable:navirice.ProtoImageSet.IR)
  return ir_;
}
inline void ProtoImageSet::set_allocated_ir(::navirice::ProtoImage* ir) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ir_;
  }
  if (ir) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ir = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ir, submessage_arena);
    }
    
  } else {
    
  }
  ir_ = ir;
  // @@protoc_insertion_point(field_set_allocated:navirice.ProtoImageSet.IR)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace navirice

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::navirice::ProtoImage_DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::navirice::ProtoImage_DataType>() {
  return ::navirice::ProtoImage_DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_navirice_5fimage_2eproto__INCLUDED
