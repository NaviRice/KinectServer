// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: navirice_image.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "navirice_image.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace navirice {
class ImageSet_ImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageSet_Image>
     _instance;
} _ImageSet_Image_default_instance_;
class ImageSetDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageSet>
     _instance;
} _ImageSet_default_instance_;

namespace protobuf_navirice_5fimage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSet_Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSet_Image, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSet_Image, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSet_Image, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSet_Image, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSet_Image, data_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSet_Image, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSet, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSet, rgb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSet, depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSet, ir_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(ImageSet_Image)},
  { 11, -1, sizeof(ImageSet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageSet_Image_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageSet_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "navirice_image.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ImageSet_Image_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageSet_Image_default_instance_);_ImageSet_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageSet_default_instance_);_ImageSet_default_instance_._instance.get_mutable()->rgb_ = const_cast< ::navirice::ImageSet_Image*>(
      ::navirice::ImageSet_Image::internal_default_instance());
  _ImageSet_default_instance_._instance.get_mutable()->depth_ = const_cast< ::navirice::ImageSet_Image*>(
      ::navirice::ImageSet_Image::internal_default_instance());
  _ImageSet_default_instance_._instance.get_mutable()->ir_ = const_cast< ::navirice::ImageSet_Image*>(
      ::navirice::ImageSet_Image::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024navirice_image.proto\022\010navirice\"\303\002\n\010Ima"
      "geSet\022\r\n\005count\030\001 \001(\004\022%\n\003RGB\030\002 \001(\0132\030.navi"
      "rice.ImageSet.Image\022\'\n\005Depth\030\003 \001(\0132\030.nav"
      "irice.ImageSet.Image\022$\n\002IR\030\004 \001(\0132\030.navir"
      "ice.ImageSet.Image\032\261\001\n\005Image\022\r\n\005width\030\001 "
      "\001(\r\022\016\n\006height\030\002 \001(\r\022\020\n\010channels\030\003 \001(\r\0224\n"
      "\tdata_type\030\004 \001(\0162!.navirice.ImageSet.Ima"
      "ge.DataType\022\021\n\tdata_size\030\005 \001(\r\022\014\n\004data\030\006"
      " \001(\014\" \n\010DataType\022\t\n\005FLOAT\020\000\022\t\n\005UBYTE\020\001b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 366);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "navirice_image.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_navirice_5fimage_2eproto

const ::google::protobuf::EnumDescriptor* ImageSet_Image_DataType_descriptor() {
  protobuf_navirice_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navirice_5fimage_2eproto::file_level_enum_descriptors[0];
}
bool ImageSet_Image_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImageSet_Image_DataType ImageSet_Image::FLOAT;
const ImageSet_Image_DataType ImageSet_Image::UBYTE;
const ImageSet_Image_DataType ImageSet_Image::DataType_MIN;
const ImageSet_Image_DataType ImageSet_Image::DataType_MAX;
const int ImageSet_Image::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageSet_Image::kWidthFieldNumber;
const int ImageSet_Image::kHeightFieldNumber;
const int ImageSet_Image::kChannelsFieldNumber;
const int ImageSet_Image::kDataTypeFieldNumber;
const int ImageSet_Image::kDataSizeFieldNumber;
const int ImageSet_Image::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageSet_Image::ImageSet_Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_navirice_5fimage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:navirice.ImageSet.Image)
}
ImageSet_Image::ImageSet_Image(const ImageSet_Image& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_size_) -
    reinterpret_cast<char*>(&width_)) + sizeof(data_size_));
  // @@protoc_insertion_point(copy_constructor:navirice.ImageSet.Image)
}

void ImageSet_Image::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_size_) -
      reinterpret_cast<char*>(&width_)) + sizeof(data_size_));
  _cached_size_ = 0;
}

ImageSet_Image::~ImageSet_Image() {
  // @@protoc_insertion_point(destructor:navirice.ImageSet.Image)
  SharedDtor();
}

void ImageSet_Image::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageSet_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageSet_Image::descriptor() {
  protobuf_navirice_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navirice_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageSet_Image& ImageSet_Image::default_instance() {
  protobuf_navirice_5fimage_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageSet_Image* ImageSet_Image::New(::google::protobuf::Arena* arena) const {
  ImageSet_Image* n = new ImageSet_Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageSet_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:navirice.ImageSet.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_size_) -
      reinterpret_cast<char*>(&width_)) + sizeof(data_size_));
  _internal_metadata_.Clear();
}

bool ImageSet_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navirice.ImageSet.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navirice.ImageSet.Image.DataType data_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::navirice::ImageSet_Image_DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 data_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navirice.ImageSet.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navirice.ImageSet.Image)
  return false;
#undef DO_
}

void ImageSet_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navirice.ImageSet.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // uint32 channels = 3;
  if (this->channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channels(), output);
  }

  // .navirice.ImageSet.Image.DataType data_type = 4;
  if (this->data_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->data_type(), output);
  }

  // uint32 data_size = 5;
  if (this->data_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->data_size(), output);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navirice.ImageSet.Image)
}

::google::protobuf::uint8* ImageSet_Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navirice.ImageSet.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // uint32 channels = 3;
  if (this->channels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channels(), target);
  }

  // .navirice.ImageSet.Image.DataType data_type = 4;
  if (this->data_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->data_type(), target);
  }

  // uint32 data_size = 5;
  if (this->data_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->data_size(), target);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navirice.ImageSet.Image)
  return target;
}

size_t ImageSet_Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navirice.ImageSet.Image)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint32 channels = 3;
  if (this->channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channels());
  }

  // .navirice.ImageSet.Image.DataType data_type = 4;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }

  // uint32 data_size = 5;
  if (this->data_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageSet_Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navirice.ImageSet.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageSet_Image* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageSet_Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navirice.ImageSet.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navirice.ImageSet.Image)
    MergeFrom(*source);
  }
}

void ImageSet_Image::MergeFrom(const ImageSet_Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navirice.ImageSet.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.channels() != 0) {
    set_channels(from.channels());
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
  if (from.data_size() != 0) {
    set_data_size(from.data_size());
  }
}

void ImageSet_Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navirice.ImageSet.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageSet_Image::CopyFrom(const ImageSet_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navirice.ImageSet.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSet_Image::IsInitialized() const {
  return true;
}

void ImageSet_Image::Swap(ImageSet_Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageSet_Image::InternalSwap(ImageSet_Image* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(channels_, other->channels_);
  swap(data_type_, other->data_type_);
  swap(data_size_, other->data_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageSet_Image::GetMetadata() const {
  protobuf_navirice_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navirice_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageSet_Image

// uint32 width = 1;
void ImageSet_Image::clear_width() {
  width_ = 0u;
}
::google::protobuf::uint32 ImageSet_Image::width() const {
  // @@protoc_insertion_point(field_get:navirice.ImageSet.Image.width)
  return width_;
}
void ImageSet_Image::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:navirice.ImageSet.Image.width)
}

// uint32 height = 2;
void ImageSet_Image::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 ImageSet_Image::height() const {
  // @@protoc_insertion_point(field_get:navirice.ImageSet.Image.height)
  return height_;
}
void ImageSet_Image::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:navirice.ImageSet.Image.height)
}

// uint32 channels = 3;
void ImageSet_Image::clear_channels() {
  channels_ = 0u;
}
::google::protobuf::uint32 ImageSet_Image::channels() const {
  // @@protoc_insertion_point(field_get:navirice.ImageSet.Image.channels)
  return channels_;
}
void ImageSet_Image::set_channels(::google::protobuf::uint32 value) {
  
  channels_ = value;
  // @@protoc_insertion_point(field_set:navirice.ImageSet.Image.channels)
}

// .navirice.ImageSet.Image.DataType data_type = 4;
void ImageSet_Image::clear_data_type() {
  data_type_ = 0;
}
::navirice::ImageSet_Image_DataType ImageSet_Image::data_type() const {
  // @@protoc_insertion_point(field_get:navirice.ImageSet.Image.data_type)
  return static_cast< ::navirice::ImageSet_Image_DataType >(data_type_);
}
void ImageSet_Image::set_data_type(::navirice::ImageSet_Image_DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:navirice.ImageSet.Image.data_type)
}

// uint32 data_size = 5;
void ImageSet_Image::clear_data_size() {
  data_size_ = 0u;
}
::google::protobuf::uint32 ImageSet_Image::data_size() const {
  // @@protoc_insertion_point(field_get:navirice.ImageSet.Image.data_size)
  return data_size_;
}
void ImageSet_Image::set_data_size(::google::protobuf::uint32 value) {
  
  data_size_ = value;
  // @@protoc_insertion_point(field_set:navirice.ImageSet.Image.data_size)
}

// bytes data = 6;
void ImageSet_Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImageSet_Image::data() const {
  // @@protoc_insertion_point(field_get:navirice.ImageSet.Image.data)
  return data_.GetNoArena();
}
void ImageSet_Image::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:navirice.ImageSet.Image.data)
}
#if LANG_CXX11
void ImageSet_Image::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:navirice.ImageSet.Image.data)
}
#endif
void ImageSet_Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:navirice.ImageSet.Image.data)
}
void ImageSet_Image::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:navirice.ImageSet.Image.data)
}
::std::string* ImageSet_Image::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:navirice.ImageSet.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageSet_Image::release_data() {
  // @@protoc_insertion_point(field_release:navirice.ImageSet.Image.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageSet_Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:navirice.ImageSet.Image.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageSet::kCountFieldNumber;
const int ImageSet::kRGBFieldNumber;
const int ImageSet::kDepthFieldNumber;
const int ImageSet::kIRFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageSet::ImageSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_navirice_5fimage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:navirice.ImageSet)
}
ImageSet::ImageSet(const ImageSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rgb()) {
    rgb_ = new ::navirice::ImageSet_Image(*from.rgb_);
  } else {
    rgb_ = NULL;
  }
  if (from.has_depth()) {
    depth_ = new ::navirice::ImageSet_Image(*from.depth_);
  } else {
    depth_ = NULL;
  }
  if (from.has_ir()) {
    ir_ = new ::navirice::ImageSet_Image(*from.ir_);
  } else {
    ir_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:navirice.ImageSet)
}

void ImageSet::SharedCtor() {
  ::memset(&rgb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&rgb_)) + sizeof(count_));
  _cached_size_ = 0;
}

ImageSet::~ImageSet() {
  // @@protoc_insertion_point(destructor:navirice.ImageSet)
  SharedDtor();
}

void ImageSet::SharedDtor() {
  if (this != internal_default_instance()) delete rgb_;
  if (this != internal_default_instance()) delete depth_;
  if (this != internal_default_instance()) delete ir_;
}

void ImageSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageSet::descriptor() {
  protobuf_navirice_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navirice_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageSet& ImageSet::default_instance() {
  protobuf_navirice_5fimage_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageSet* ImageSet::New(::google::protobuf::Arena* arena) const {
  ImageSet* n = new ImageSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageSet::Clear() {
// @@protoc_insertion_point(message_clear_start:navirice.ImageSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && rgb_ != NULL) {
    delete rgb_;
  }
  rgb_ = NULL;
  if (GetArenaNoVirtual() == NULL && depth_ != NULL) {
    delete depth_;
  }
  depth_ = NULL;
  if (GetArenaNoVirtual() == NULL && ir_ != NULL) {
    delete ir_;
  }
  ir_ = NULL;
  count_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ImageSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:navirice.ImageSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navirice.ImageSet.Image RGB = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rgb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navirice.ImageSet.Image Depth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_depth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .navirice.ImageSet.Image IR = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:navirice.ImageSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:navirice.ImageSet)
  return false;
#undef DO_
}

void ImageSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:navirice.ImageSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->count(), output);
  }

  // .navirice.ImageSet.Image RGB = 2;
  if (this->has_rgb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rgb_, output);
  }

  // .navirice.ImageSet.Image Depth = 3;
  if (this->has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->depth_, output);
  }

  // .navirice.ImageSet.Image IR = 4;
  if (this->has_ir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ir_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:navirice.ImageSet)
}

::google::protobuf::uint8* ImageSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:navirice.ImageSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->count(), target);
  }

  // .navirice.ImageSet.Image RGB = 2;
  if (this->has_rgb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->rgb_, deterministic, target);
  }

  // .navirice.ImageSet.Image Depth = 3;
  if (this->has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->depth_, deterministic, target);
  }

  // .navirice.ImageSet.Image IR = 4;
  if (this->has_ir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->ir_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:navirice.ImageSet)
  return target;
}

size_t ImageSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:navirice.ImageSet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .navirice.ImageSet.Image RGB = 2;
  if (this->has_rgb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rgb_);
  }

  // .navirice.ImageSet.Image Depth = 3;
  if (this->has_depth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->depth_);
  }

  // .navirice.ImageSet.Image IR = 4;
  if (this->has_ir()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ir_);
  }

  // uint64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:navirice.ImageSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:navirice.ImageSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:navirice.ImageSet)
    MergeFrom(*source);
  }
}

void ImageSet::MergeFrom(const ImageSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:navirice.ImageSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rgb()) {
    mutable_rgb()->::navirice::ImageSet_Image::MergeFrom(from.rgb());
  }
  if (from.has_depth()) {
    mutable_depth()->::navirice::ImageSet_Image::MergeFrom(from.depth());
  }
  if (from.has_ir()) {
    mutable_ir()->::navirice::ImageSet_Image::MergeFrom(from.ir());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ImageSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:navirice.ImageSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageSet::CopyFrom(const ImageSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:navirice.ImageSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSet::IsInitialized() const {
  return true;
}

void ImageSet::Swap(ImageSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageSet::InternalSwap(ImageSet* other) {
  using std::swap;
  swap(rgb_, other->rgb_);
  swap(depth_, other->depth_);
  swap(ir_, other->ir_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageSet::GetMetadata() const {
  protobuf_navirice_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_navirice_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageSet

// uint64 count = 1;
void ImageSet::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ImageSet::count() const {
  // @@protoc_insertion_point(field_get:navirice.ImageSet.count)
  return count_;
}
void ImageSet::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:navirice.ImageSet.count)
}

// .navirice.ImageSet.Image RGB = 2;
bool ImageSet::has_rgb() const {
  return this != internal_default_instance() && rgb_ != NULL;
}
void ImageSet::clear_rgb() {
  if (GetArenaNoVirtual() == NULL && rgb_ != NULL) delete rgb_;
  rgb_ = NULL;
}
const ::navirice::ImageSet_Image& ImageSet::rgb() const {
  const ::navirice::ImageSet_Image* p = rgb_;
  // @@protoc_insertion_point(field_get:navirice.ImageSet.RGB)
  return p != NULL ? *p : *reinterpret_cast<const ::navirice::ImageSet_Image*>(
      &::navirice::_ImageSet_Image_default_instance_);
}
::navirice::ImageSet_Image* ImageSet::mutable_rgb() {
  
  if (rgb_ == NULL) {
    rgb_ = new ::navirice::ImageSet_Image;
  }
  // @@protoc_insertion_point(field_mutable:navirice.ImageSet.RGB)
  return rgb_;
}
::navirice::ImageSet_Image* ImageSet::release_rgb() {
  // @@protoc_insertion_point(field_release:navirice.ImageSet.RGB)
  
  ::navirice::ImageSet_Image* temp = rgb_;
  rgb_ = NULL;
  return temp;
}
void ImageSet::set_allocated_rgb(::navirice::ImageSet_Image* rgb) {
  delete rgb_;
  rgb_ = rgb;
  if (rgb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:navirice.ImageSet.RGB)
}

// .navirice.ImageSet.Image Depth = 3;
bool ImageSet::has_depth() const {
  return this != internal_default_instance() && depth_ != NULL;
}
void ImageSet::clear_depth() {
  if (GetArenaNoVirtual() == NULL && depth_ != NULL) delete depth_;
  depth_ = NULL;
}
const ::navirice::ImageSet_Image& ImageSet::depth() const {
  const ::navirice::ImageSet_Image* p = depth_;
  // @@protoc_insertion_point(field_get:navirice.ImageSet.Depth)
  return p != NULL ? *p : *reinterpret_cast<const ::navirice::ImageSet_Image*>(
      &::navirice::_ImageSet_Image_default_instance_);
}
::navirice::ImageSet_Image* ImageSet::mutable_depth() {
  
  if (depth_ == NULL) {
    depth_ = new ::navirice::ImageSet_Image;
  }
  // @@protoc_insertion_point(field_mutable:navirice.ImageSet.Depth)
  return depth_;
}
::navirice::ImageSet_Image* ImageSet::release_depth() {
  // @@protoc_insertion_point(field_release:navirice.ImageSet.Depth)
  
  ::navirice::ImageSet_Image* temp = depth_;
  depth_ = NULL;
  return temp;
}
void ImageSet::set_allocated_depth(::navirice::ImageSet_Image* depth) {
  delete depth_;
  depth_ = depth;
  if (depth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:navirice.ImageSet.Depth)
}

// .navirice.ImageSet.Image IR = 4;
bool ImageSet::has_ir() const {
  return this != internal_default_instance() && ir_ != NULL;
}
void ImageSet::clear_ir() {
  if (GetArenaNoVirtual() == NULL && ir_ != NULL) delete ir_;
  ir_ = NULL;
}
const ::navirice::ImageSet_Image& ImageSet::ir() const {
  const ::navirice::ImageSet_Image* p = ir_;
  // @@protoc_insertion_point(field_get:navirice.ImageSet.IR)
  return p != NULL ? *p : *reinterpret_cast<const ::navirice::ImageSet_Image*>(
      &::navirice::_ImageSet_Image_default_instance_);
}
::navirice::ImageSet_Image* ImageSet::mutable_ir() {
  
  if (ir_ == NULL) {
    ir_ = new ::navirice::ImageSet_Image;
  }
  // @@protoc_insertion_point(field_mutable:navirice.ImageSet.IR)
  return ir_;
}
::navirice::ImageSet_Image* ImageSet::release_ir() {
  // @@protoc_insertion_point(field_release:navirice.ImageSet.IR)
  
  ::navirice::ImageSet_Image* temp = ir_;
  ir_ = NULL;
  return temp;
}
void ImageSet::set_allocated_ir(::navirice::ImageSet_Image* ir) {
  delete ir_;
  ir_ = ir;
  if (ir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:navirice.ImageSet.IR)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace navirice

// @@protoc_insertion_point(global_scope)
